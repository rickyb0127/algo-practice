export const heaps = [
  {
    "title": "Laptop Rentals",
    "functionName": "laptopRentals",
    "args": ["times"],
    "difficulty": "Hard",
    "category": "Heaps",
    "text": `<p className="flex mb-2">
      You're given a list of time intervals during which students at a school need a
      laptop. These time intervals are represented by pairs of integers
      [start, end], where 0 <= start end. However,
      start and end don't represent real times; therefore,
      they may be greater than 24.
    </p>
    <p className="flex mb-2">
      No two students can use a laptop at the same time, but immediately after a
      student is done using a laptop, another student can use that same laptop. For
      example, if one student rents a laptop during the time interval
      [0, 2], another student can rent the same laptop during any time
      interval starting with 2.
    </p>
    <p className="flex mb-2">
      Write a function that returns the minimum number of laptops that the school
      needs to rent such that all students will always have access to a laptop when
      they need one.
    </p>`,
    "comparisonType": "VALUE_MATCH",
    "testCases": [
      {
        "input": {
          "times": [
            [0, 2],
            [1, 4],
            [4, 6],
            [0, 4],
            [7, 8],
            [9, 11],
            [3, 10]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "times": [
            [0, 4],
            [2, 3],
            [2, 3],
            [2, 3]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "times": [
            [1, 5],
            [5, 6],
            [6, 7],
            [7, 9]
          ]
        },
        "output": 1
      },
      {
        "input": {
          "times": [
            [0, 4]
          ]
        },
        "output": 1
      },
      { 
        "input": {
          "times": []
        },
        "output": 0
      },
      {
        "input": {
          "times": [
            [0, 5],
            [2, 4],
            [4, 7],
            [5, 7],
            [9, 20],
            [3, 15],
            [6, 10]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "times": [
            [10, 20],
            [0, 5],
            [5, 10],
            [10, 15]
          ]
        },
        "output": 2
      },
      {
        "input": {
          "times": [
            [0, 5],
            [3, 8],
            [4, 10],
            [7, 11],
            [6, 10]
          ]
        },
        "output": 4
      },
      {
        "input": {
          "times": [
            [0, 5],
            [1, 4],
            [2, 3],
            [3, 8],
            [7, 9],
            [11, 20],
            [0, 20],
            [3, 10]
          ]
        },
        "output": 5
      },
      {
        "input": {
          "times": [
            [10, 20],
            [5, 15],
            [0, 6],
            [0, 20],
            [21, 22],
            [0, 1],
            [2, 5]
          ]
        },
        "output": 3
      },
      {
        "input": {
          "times": [
            [0, 10],
            [1, 9],
            [2, 8],
            [3, 7],
            [4, 6],
            [5, 6]
          ]
        },
        "output": 6
      },
      {
        "input": {
          "times": [
            [0, 20],
            [0, 10],
            [1, 9],
            [2, 8],
            [3, 7],
            [4, 6],
            [5, 6],
            [10, 15],
            [11, 12]
          ]
        },
        "output": 7
      }
    ]
  },
  {
    "title": "Merge Sorted Arrays",
    "functionName": "mergeSortedArrays",
    "args": ["arrays"],
    "difficulty": "Very Hard",
    "category": "Heaps",
    "text": `<p className="flex mb-2">
      Write a function that takes in a non-empty list of non-empty sorted arrays of
      integers and returns a merged list of all of those arrays.
    </p>
    <p className="flex mb-2">The integers in the merged list should be in sorted order.</p>`,
    "comparisonType": ComparisonType.ORDERED_ARRAY,
    "testCases": [
      {
        "input": {
          "arrays": [
            [1, 5, 9, 21],
            [-1, 0],
            [-124, 81, 121],
            [3, 6, 12, 20, 150]
          ]
        },
        "output": [-124, -1, 0, 1, 3, 5, 6, 9, 12, 20, 21, 81, 121, 150]
      },
      {
        "input": {
          "arrays": [
            [-92, -78, -68, 43, 46, 46, 79, 79],
            [-66, -49, -26, -16, 21, 28, 33, 50],
            [-40, -8, 12, 20, 36, 38, 81],
            [-76, -74, -62, -46, -23, 33, 42, 48, 55, 94]
          ]
        },
        "output": [-92, -78, -76, -74, -68, -66, -62, -49, -46, -40, -26, -23, -16, -8, 12, 20, 21, 28, 33, 33, 36, 38, 42, 43, 46, 46, 48, 50, 55, 79, 79, 81, 94]
      },
      {
        "input": {
          "arrays": [
            [-95, -74, 1],
            [-28, 28, 95],
            [-89, -78, -67, -66, -25, -22, 2, 38],
            [-86, -35, -25, -13, 41],
            [-85, -77, -21, 72],
            [-55, 4, 84, 98],
            [-75, -73, 22]
          ]
        },
        "output": [-95, -89, -86, -85, -78, -77, -75, -74, -73, -67, -66, -55, -35, -28, -25, -25, -22, -21, -13, 1, 2, 4, 22, 28, 38, 41, 72, 84, 95, 98]
      },
      {
        "input": {
          "arrays": [
            [-79, -43, -15, 89],
            [-48, 13, 20],
            [-33, -19, -8, 12, 40, 44, 50, 52, 91, 95],
            [-100, -43, -8, 17],
            [-15, 81]
          ]
        },
        "output": [-100, -79, -48, -43, -43, -33, -19, -15, -15, -8, -8, 12, 13, 17, 20, 40, 44, 50, 52, 81, 89, 91, 95]
      },
      {
        "input": {
          "arrays": [
            [-88, -56, -43, -41, -13, -8, 82],
            [-38, 53],
            [-75, -48, -42, -27, 20, 35, 55],
            [-55, -50, -48, -45, 62, 69, 77],
            [-90, -27, -22, -19, -6, -3, 4, 6, 91],
            [-86, -67, -66, 2, 8, 8, 39, 74],
            [-62, 34, 40, 42, 47, 48, 55, 56, 68, 87]
          ]
        },
        "output": [-90, -88, -86, -75, -67, -66, -62, -56, -55, -50, -48, -48, -45, -43, -42, -41, -38, -27, -27, -22, -19, -13, -8, -6, -3, 2, 4, 6, 8, 8, 20, 34, 35, 39, 40, 42, 47, 48, 53, 55, 55, 56, 62, 68, 69, 74, 77, 82, 87, 91]
      },
      {
        "input": {
          "arrays": [
            [-93, -83, -43, -32, -32, -15, -14, 12, 78, 80],
            [-83],
            [-82, -51, -29, 40, 60, 76, 80],
            [50],
            [-33, -16],
            [-100],
            [-33, -11, 23, 29, 29, 43],
            [0, 70],
            [-57, -43, -41, -18, -5, 74]
          ]
        },
        "output": [-100, -93, -83, -83, -82, -57, -51, -43, -43, -41, -33, -33, -32, -32, -29, -18, -16, -15, -14, -11, -5, 0, 12, 23, 29, 29, 40, 43, 50, 60, 70, 74, 76, 78, 80, 80]
      },
      {
        "input": {
          "arrays": [
            [98],
            [-87, -79, -56, -33, -20, -10, -5, 19, 49, 86],
            [-73, -49],
            [-98, -63, -47, -4, 21],
            [-56, -43, -24, 8, 34, 80, 83],
            [-83, -65, -61, -30, -26, -16, 16, 19],
            [-91, -42, -21, 91],
            [-73, -62, -56, -30, 11, 67],
            [-91, -90, -40, 32, 94]
          ]
        },
        "output": [-98, -91, -91, -90, -87, -83, -79, -73, -73, -65, -63, -62, -61, -56, -56, -56, -49, -47, -43, -42, -40, -33, -30, -30, -26, -24, -21, -20, -16, -10, -5, -4, 8, 11, 16, 19, 19, 21, 32, 34, 49, 67, 80, 83, 86, 91, 94, 98]
      },
      {
        "input": {
          "arrays": [
            [-81, 36, 57, 59],
            [-65, -58, -47, -39, 29, 53, 66, 75, 88, 92],
            [-67, -54, -40, -25, 9, 17, 55, 75, 94],
            [-35, -3, 24, 82],
            [-86, 32, 95]
          ]
        },
        "output": [-86, -81, -67, -65, -58, -54, -47, -40, -39, -35, -25, -3, 9, 17, 24, 29, 32, 36, 53, 55, 57, 59, 66, 75, 75, 82, 88, 92, 94, 95]
      },
      {
        "input": {
          "arrays": [
            [-93, -83, -78, -75, -40, -32, 48],
            [-90, -75, -57, 7, 11, 21, 53, 84, 89],
            [-50, -40, -20, 71, 96],
            [-49, 13, 18, 61, 97],
            [42, 96]
          ]
        },
        "output": [-93, -90, -83, -78, -75, -75, -57, -50, -49, -40, -40, -32, -20, 7, 11, 13, 18, 21, 42, 48, 53, 61, 71, 84, 89, 96, 96, 97]
      },
      {
        "input": {
          "arrays": [
            [-63, -55, -9, 37, 86, 97],
            [-62, -48, -37, -16, 11, 33, 80, 97],
            [-51, 5, 34],
            [-24, -24, -19, 32, 46, 97],
            [-98, -56, -12, -2, -1, 11, 47, 79],
            [-59, 64, 93, 96],
            [-96, -51, -21, -18, 29, 57, 87, 90, 92],
            [-89, -85, -55, -12, 27],
            [-96, -96, -95, -95, -71, -45, -28, 8, 19, 100]
          ]
        },
        "output": [-98, -96, -96, -96, -95, -95, -89, -85, -71, -63, -62, -59, -56, -55, -55, -51, -51, -48, -45, -37, -28, -24, -24, -21, -19, -18, -16, -12, -12, -9, -2, -1, 5, 8, 11, 11, 19, 27, 29, 32, 33, 34, 37, 46, 47, 57, 64, 79, 80, 86, 87, 90, 92, 93, 96, 97, 97, 97, 100]
      },
      {
        "input": {
          "arrays": [
            [49, 72],
            [-95, -49, -18, -16, 1, 16, 36, 40, 75, 92],
            [-77, 11, 65, 91]
          ]
        },
        "output": [-95, -77, -49, -18, -16, 1, 11, 16, 36, 40, 49, 65, 72, 75, 91, 92]
      },
      {
        "input": {
          "arrays": [
            [-94, -93, -25, -2, 67, 85],
            [-83, -74, 64],
            [-83, 10, 46, 64],
            [-94, -54, -40, 9, 22, 49]
          ]
        },
        "output": [-94, -94, -93, -83, -83, -74, -54, -40, -25, -2, 9, 10, 22, 46, 49, 64, 64, 67, 85]
      }
    ]
  }
];